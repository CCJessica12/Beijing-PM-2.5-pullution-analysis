# The corresponding 95% prediction interval
tail(PI,1)
library(tseries)
path = "~/Desktop/GR5221 Time Series Analysis/R code/data set/"
lake = read.table(paste0(path,"lake.txt"), sep = "")
lake=ts(lake$V1,start=1875); (n.lake=length(lake))
adf.test(lake)
Arima(lake,order = c(1,0,0), method = "ML")
Arima(lake,order = c(2,0,0), method = "ML")
library(itsmr)
library(forecast)
ashort = window(AirPassengers,end=1959+11/12)
ashort_forecast = window(AirPassengers, start=1960)
op = par(mfrow=c(1,2))
acf(ashort,lag.max = 40,
xlab = "time lag", ylab = 'ACF',main='ACF')
acf(ashort,lag.max = 40, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
par(op)
ashort_diff = diff(ashort)
plot(1:length(ashort_diff),ts(ashort_diff),type="l",
pch=22,lty=1,pty=2,col = "black",ylab="",xlab = "")
abline(h=mean(ashort_diff),col = "red", lwd = 3, lty = 4)
op = par(mfrow=c(1,2))
acf(ashort_diff,lag.max = 100,
xlab = "time lag", ylab = 'ACF',main='ACF')   # season = 12
acf(ashort_diff,lag.max = 100, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
par(op)
ashort_diff = diff(ashort_diff,lag = 12)
op = par(mfrow=c(1,2))
acf(ashort_diff,lag.max = 100,
xlab = "time lag", ylab = 'ACF',main='ACF')   # season = 12
acf(ashort_diff,lag.max = 100, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
par(op)
fit_ma = Arima(ashort,order=c(0,1,1),seasonal=list(order=c(0,1,1),period=12),lambda=0)
fit_ar = Arima(ashort,order=c(1,1,0),seasonal=list(order=c(0,1,1),period=12),lambda=0)
matrix(data = c(fit_ma$aic,fit_ar$aic), nrow = 1, byrow = F,
dimnames = list(c("AIC"),
c("SMA(0,1,1)x(0,1,1)",
"SAR(1,1,0)x(0,1,1)")))
phi_hat = as.numeric(fit_ma$coef[1])
phi_upper = phi_hat + 1.96*sqrt(fit_ma$sigma2/length(ashort))
phi_lower = phi_hat - 1.96*sqrt(fit_ma$sigma2/length(ashort))
matrix(data = round(c(phi_lower, phi_upper,phi_hat),4), nrow = 1,
dimnames = list("95% CI for Phi:", c("Lower","Upper"," Phi_hat")))
ashort_residual = fit_ma$residuals
# Test of randomness:
Box.test(ashort_residual,lag=20,type="Box-Pierce") #p-value = 0.8773
# Test of normality:
qqnorm(ashort_residual); qqline(ashort_residual)
shapiro.test(ashort_residual)   #p-value = 0.3065
mean(ashort_residual);var(ashort_residual)
plot(forecast(fit_ma,h=36), lwd = 2)
lines(ashort_forecast, col = "red", lwd = 2, lty = 3)
legend("topleft", legend = c("Training data","Test data","Forecast (3 years)"),
col = c("black","red","blue"), lty = c(1,3,1), lwd = c(1,2,1))
forecasting = forecast(fit_ma,h=12)
pred_upper = forecasting$upper[,2]
pred_lower = forecasting$lower[,2]
PI = cbind(pred_lower, pred_upper)
PI
ashort_forecast - forecasting$mean
# Last value of AIRPASS:
tail(AirPassengers,1)
# The corresponding 95% prediction interval
tail(PI,1)
library(tseries)
library(itsmr)
library(forecast)
path = "~/Desktop/GR5221 Time Series Analysis/R code/data set/"
lake = read.table(paste0(path,"lake.txt"), sep = "")
lake=ts(lake$V1,start=1875); (n.lake=length(lake))
adf.test(lake)
arima(lake,order = c(1,0,0), method = "ML")
arima(lake,order = c(2,0,0), method = "ML")
ashort = ts(log(airpass[1:(144-12)]),frequency = 12)
#ashort = log(airpass[1:(144-12)])
del_12 = log(airpass[133:144])
op = par(mfrow=c(1,2))
acf(ashort,lag.max = 40,
xlab = "time lag", ylab = 'ACF',main='ACF')
acf(ashort,lag.max = 40, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
par(op)
ashort_diff = diff(ashort)
plot(1:length(ashort_diff),ts(ashort_diff),type="l",
pch=22,lty=1,pty=2,col = "black",ylab="",xlab = "")
abline(h=mean(ashort_diff),col = "red", lwd = 3, lty = 4)
op = par(mfrow=c(1,2))
acf(ashort_diff,lag.max = 100,
xlab = "time lag", ylab = 'ACF',main='ACF')   # season = 12
acf(ashort_diff,lag.max = 100, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
par(op)
pacf = acf(ashort_diff,lag.max = 100, type = "partial",plot = F)
order(abs(pacf$acf), decreasing = T)
ashort_diff = diff(ashort_diff,lag = 12)
op = par(mfrow=c(1,2))
acf(ashort_diff,lag.max = 100,
xlab = "time lag", ylab = 'ACF',main='ACF')   # season = 12
acf(ashort_diff,lag.max = 100, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
par(op)
fit_ma = Arima(ashort-mean(ashort),order=c(0,1,1),
seasonal=list(order=c(0,0,1),period=12),
method = "ML",
include.mean=FALSE)
fit_ar = Arima(ashort-mean(ashort),order=c(1,1,0),
seasonal=list(order=c(0,0,1),period=12),
method = "ML",
include.mean=FALSE)
c(fit_ma$aic,fit_ar$aic)
phi_hat = as.numeric(fit_ar$coef[1])
phi_up = phi_hat - 1.96*sqrt(fit_ar$sigma2/length(ashort))
phi_low = phi_hat + 1.96*sqrt(fit_ar$sigma2/length(ashort))
matrix(data = round(c(phi_low, phi_up, phi_hat),4), nrow = 1,
dimnames = list("95% CI for Phi:", c("Lower","Upper","Phi_hat")))
ashort = ts(log(airpass[1:(144-12)]),frequency = 12)
#ashort = log(airpass[1:(144-12)])
ashort_forecast = log(airpass[133:144])
acf(ashort,lag.max = 40,
xlab = "time lag", ylab = 'ACF',main='ACF')
acf(ashort,lag.max = 40, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
acf(ashort,lag.max = 40, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
ashort_diff = diff(ashort)
acf(ashort_diff,lag.max = 100,
xlab = "time lag", ylab = 'ACF',main='ACF')   # season = 12
acf(ashort_diff,lag.max = 100, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
ashort_diff = diff(ashort_diff,lag = 12)
acf(ashort_diff,lag.max = 100,
xlab = "time lag", ylab = 'ACF',main='ACF')   # season = 12
acf(ashort_diff,lag.max = 100, type = "partial",
xlab = "time lag", ylab = 'PACF', main='PACF')
fit_ma = Arima(ashort,order=c(0,1,1),seasonal=list(order=c(0,1,1),period=12),lambda=0)
fit_ar = Arima(ashort,order=c(1,1,0),seasonal=list(order=c(0,1,1),period=12),lambda=0)
phi_hat = as.numeric(fit_ma$coef[1])
phi_upper = phi_hat + 1.96*sqrt(fit_ma$sigma2/length(ashort))
phi_lower = phi_hat - 1.96*sqrt(fit_ma$sigma2/length(ashort))
ashort_residual = fit_ma$residuals
# Test of randomness:
Box.test(ashort_residual,lag=20,type="Box-Pierce") #p-value = 0.8773
phi_upper = as.numeric(fit_ma$coef[1]) + 1.96*sqrt(fit_ma$sigma2/length(ashort))
phi_lower = as.numeric(fit_ma$coef[1]) - 1.96*sqrt(fit_ma$sigma2/length(ashort))
ashort_residual = fit_ma$residuals
plot(forecast(fit_ma,h=12), lwd = 2)
##### problem 6.7
ashort = ts(log(airpass[1:(144-12)]),frequency = 12)
ashort_forecast = log(airpass[133:144])
library(tseries)
library(itsmr)
library(forecast)
##### problem 6.7
ashort = ts(log(airpass[1:(144-12)]),frequency = 12)
ashort_forecast = log(airpass[133:144])
ashort_diff = diff(ashort)
fit_ma = Arima(ashort,order=c(0,1,1),seasonal=list(order=c(0,1,1),period=12),lambda=0)
ashort_residual = fit_ma$residuals
plot(forecast(fit_ma,h=12), lwd = 2)
row.names(athletic)[o3]
load("athletic.rda")
load("athletic.rda")
# main calculation
facthle = factanal(athletic,factors=3,rotation="varimax",scores="regression")
print(facthle)
facttable = cbind(facthle$loadings, (1 - facthle$uniquenesses),facthle$uniqueness)
colnames(facttable) = c("q1", "q2", "q3", "Communalities", "Specific variances")
print(round(facttable,4))
# xtable(facttable,digits=4)
lab = colnames(athletic)
par(mfrow=c(2,2))
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[1]),ylab=expression(q[2]))
ucircle = cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,1:2],labels=lab,col="black",xpd=NA)
frame()
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[1]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(1,3)],labels=lab,col="black",xpd=NA)
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[2]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(2,3)],labels=lab,col="black",xpd=NA)
dev.new()
par(mfrow=c(2,2))
plot(facthle$scores[,1:2],type="n",xlab=expression(f[1]),ylab=expression(f[2]),main="Athletic (factor scores)")
text(facthle$scores[,1:2],row.names(athletic),cex=0.7,xpd=NA)
frame()
plot(facthle$scores[,c(1,3)],type="n",xlab=expression(f[1]),ylab=expression(f[3]),main="Athletic (factor scores)")
text(facthle$scores[,c(1,3)],row.names(athletic),cex=0.7,xpd=NA)
plot(facthle$scores[,c(2,3)],type="n",xlab=expression(f[2]),ylab=expression(f[3]),main="Athletic (factor scores)")
text(facthle$scores[,c(2,3)],row.names(athletic),cex=0.7,xpd=NA)
o1=order(facthle$scores[,1])
o2=order(facthle$scores[,2])
o3=order(facthle$scores[,3])
row.names(athletic)[o1]
row.names(athletic)[o2]
row.names(athletic)[o3]
View(athletic)
facttable = cbind(facthle$loadings, (1 - facthle$uniquenesses),facthle$uniqueness)
colnames(facttable) = c("q1", "q2", "q3", "Communalities", "Specific variances")
print(round(facttable,4))
load("athletic.rda")
# main calculation
facthle = factanal(athletic,factors=3,rotation="varimax",scores="regression")
print(facthle)
facttable = cbind(facthle$loadings, (1 - facthle$uniquenesses),facthle$uniqueness)
colnames(facttable) = c("q1", "q2", "q3", "Communalities", "Specific variances")
print(round(facttable,4))
# xtable(facttable,digits=4)
lab = colnames(athletic)
par(mfrow=c(2,2))
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[1]),ylab=expression(q[2]))
ucircle = cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,1:2],labels=lab,col="black",xpd=NA)
frame()
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[1]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(1,3)],labels=lab,col="black",xpd=NA)
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[2]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(2,3)],labels=lab,col="black",xpd=NA)
dev.new()
par(mfrow=c(2,2))
plot(facthle$scores[,1:2],type="n",xlab=expression(f[1]),ylab=expression(f[2]),main="Athletic (factor scores)")
text(facthle$scores[,1:2],row.names(athletic),cex=0.7,xpd=NA)
frame()
plot(facthle$scores[,c(1,3)],type="n",xlab=expression(f[1]),ylab=expression(f[3]),main="Athletic (factor scores)")
text(facthle$scores[,c(1,3)],row.names(athletic),cex=0.7,xpd=NA)
plot(facthle$scores[,c(2,3)],type="n",xlab=expression(f[2]),ylab=expression(f[3]),main="Athletic (factor scores)")
text(facthle$scores[,c(2,3)],row.names(athletic),cex=0.7,xpd=NA)
o1=order(facthle$scores[,1])
o2=order(facthle$scores[,2])
o3=order(facthle$scores[,3])
row.names(athletic)[o1]
row.names(athletic)[o2]
row.names(athletic)[o3]
print(round(facttable,4))
par(mfrow=c(2,2))
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[1]),ylab=expression(q[2]))
ucircle = cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,1:2],labels=lab,col="black",xpd=NA)
frame()
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[1]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(1,3)],labels=lab,col="black",xpd=NA)
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[2]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(2,3)],labels=lab,col="black",xpd=NA)
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="Athletic (varimax)",xlab=expression(q[1]),ylab=expression(q[2]))
ucircle = cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,1:2],labels=lab,col="black",xpd=NA)
facthle$loadings
par(mfrow=c(2,2))
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",
main="Athletic (varimax)",
xlab=expression(q[1]),
ylab=expression(q[2]))
ucircle = cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,1:2],labels=lab,col="black",xpd=NA) # use 2 factors
frame()
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",
main="Athletic (varimax)",
xlab=expression(q[1]),
ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(1,3)],labels=lab,col="black",xpd=NA) # use factor 1 and 3
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",
main="Athletic (varimax)",
xlab=expression(q[2]),
ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(2,3)],labels=lab,col="black",xpd=NA) # use factor 2 and 3
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",
main="Athletic (varimax)",
xlab=expression(q[1]),
ylab=expression(q[2]))
ucircle = cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,1:2],labels=lab,col="black",xpd=NA) # use 2 factors
par(mfrow=c(2,2))
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",
main="Athletic (varimax)",
xlab=expression(q[1]),
ylab=expression(q[2]))
ucircle = cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,1:2],labels=lab,col="black",xpd=NA) # use 2 factors
frame()
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",
main="Athletic (varimax)",
xlab=expression(q[1]),
ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(1,3)],labels=lab,col="black",xpd=NA) # use factor 1 and 3
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",
main="Athletic (varimax)",
xlab=expression(q[2]),
ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthle$loadings[,c(2,3)],labels=lab,col="black",xpd=NA) # use factor 2 and 3
dev.new()
par(mfrow=c(2,2))
plot(facthle$scores[,1:2],type="n",xlab=expression(f[1]),ylab=expression(f[2]),main="Athletic (factor scores)")
text(facthle$scores[,1:2],row.names(athletic),cex=0.7,xpd=NA)
frame()
plot(facthle$scores[,c(1,3)],type="n",xlab=expression(f[1]),ylab=expression(f[3]),main="Athletic (factor scores)")
text(facthle$scores[,c(1,3)],row.names(athletic),cex=0.7,xpd=NA)
plot(facthle$scores[,c(2,3)],type="n",xlab=expression(f[2]),ylab=expression(f[3]),main="Athletic (factor scores)")
text(facthle$scores[,c(2,3)],row.names(athletic),cex=0.7,xpd=NA)
o1=order(facthle$scores[,1])
o2=order(facthle$scores[,2])
o3=order(facthle$scores[,3])
row.names(athletic)[o1]
row.names(athletic)[o2]
row.names(athletic)[o3]
o1=order(facthle$scores[,1])
o2=order(facthle$scores[,2])
o3=order(facthle$scores[,3])
cat("Factor 1")
row.names(athletic)[o1]
cat("Factor 2")
row.names(athletic)[o2]
cat("Factor 3")
row.names(athletic)[o3]
o1=order(facthle$scores[,1])
o2=order(facthle$scores[,2])
o3=order(facthle$scores[,3])
cat("Factor 1 \n")
row.names(athletic)[o1]
cat("Factor 2 \n")
row.names(athletic)[o2]
cat("Factor 3 \n")
row.names(athletic)[o3]
print(facthle)
facthle$PVAL
print(facthle)
#print(facthle)
facthle$PVAL
facthle
path = "~/Desktop/GR5241 Stat ML/HW/hw 6/"
H = matrix(readBin(paste0(path,"histograms.bin"),"double",800*800),40000,16)
dim(H)
getwd()
setwd("~/Desktop/GR5223 Multivariate Stat Inference/Beijing-PM-2.5-pullution-analysis")
path = "~/Desktop/GR5223 Multivariate Stat Inference/Beijing-PM-2.5-pullution-analysis/data"
library(data.table)
library(tseries)
library(itsmr)
library(forecast)
library(dplyr)
library(plyr)
pm = fread(passte0(path,"/PRSA_data_2010.1.1-2014.12.31.csv"))
pm = fread(paste0(path,"/PRSA_data_2010.1.1-2014.12.31.csv"))
na_check = apply(is.na(pm),2,sum);na_check
del = which(is.na(pm$pm2.5) == TRUE)
pm[del,"pm2.5"] = 0
#pm_delete_na = pm[-del,]
#apply(is.na(pm_delete_na),2,sum)
#pm25 = pm_delete_na[,-1]
pm25 = pm[,-1]
apply(is.na(pm25),2,sum);na_check
pm25_time = as.data.frame(pm25[,c(1,2,3,4,5)])
aggregate_pm = function(x){
return(mean(x$pm2.5))
}
pm_daily  = ddply(pm25_time, .(year,month,day), aggregate_pm)
colnames(pm_daily) = c("year","month","day","pm2.5")
pm_daily = pm_daily$pm2.5
pm_monthly = ddply(pm25_time, .(year,month), aggregate_pm)
colnames(pm_monthly) = c("year","month","pm2.5")
pm_monthly = pm_monthly$pm2.5
length(pm_daily)
n1 = length(pm_daily)
pm_daily = pm_daily$pm2.5[1:round(n1*0.70,1)]
round(n1*0.70,1)
round(n1*0.70)
pm_daily = pm_daily$pm2.5[1:round(n1*0.70)]
head(head_da)
head(pm_daily)
pm_daily = pm_daily[1:round(length(pm_daily)*0.7)]
pm_daily = log(pm_daily[which(pm_daily != 0)])
fit_daily = auto.arima(ts(pm_daily))
plot(forecast(fit_daily,h=12), lwd = 2)
plot(forecast(fit_daily,h=48), lwd = 2)
forecasting = forecast(fit_daily,h=48)
pred_upper = forecasting$upper[,2]
pred_lower = forecasting$lower[,2]
PI = cbind(pred_lower, pred_upper)
head(PI,10)
round(length(pm_daily)*0.7)
pm_daily  = ddply(pm25_time, .(year,month,day), aggregate_pm)
colnames(pm_daily) = c("year","month","day","pm2.5")
pm_daily = pm_daily$pm2.5
test = pm_daily[round(length(pm_daily)*0.7)+1 : length(pm_daily)]
plot(forecast(fit_daily,h=length(test)), lwd = 2)
forecasting = forecast(fit_daily,h=length(test))
pred_upper = forecasting$upper[,2]
pred_lower = forecasting$lower[,2]
PI = cbind(pred_lower, pred_upper)
test - forecasting$mean
pm_monthly = ddply(pm25_time, .(year,month), aggregate_pm)
pm_monthly = pm_monthly$pm2.5
test = pm_monthly[round(length(pm_monthly)*0.7)+1 : length(pm_monthly)]
pm_monthly = pm_daily[1:round(length(pm_monthly)*0.7)]
pm_monthly = log(pm_monthly[which(pm_monthly != 0)])
fit_monthly_ma = Arima(pm_monthly,order=c(0,0,6))
fit_monthly_ar = Arima(pm_monthly,order=c(6,0,0))
pm_monthly = pm_monthly$pm2.5
pm_monthly = ddply(pm25_time, .(year,month), aggregate_pm)
colnames(pm_monthly) = c("year","month","pm2.5")
pm_monthly = pm_monthly$pm2.5
length(pm_monthly)
test = pm_monthly[round(length(pm_monthly)*0.9)+1 : length(pm_monthly)]
pm_monthly = pm_daily[1:round(length(pm_monthly)*0.9)]
length(pm_monthly)
pm_monthly = log(pm_monthly[which(pm_monthly != 0)])
fit_monthly_ma = Arima(pm_monthly,order=c(0,0,6))
fit_monthly_ar = Arima(pm_monthly,order=c(6,0,0))
aic_ma = c()
for (i in 1:10){
fit = Arima(pm_monthly,order = c(0,0,i))
aic_ma[i] = fit$aic
}
aic_ar = c()
for (i in 1:10){
fit = Arima(pm_monthly,order = c(i,0,0))
aic_ar[i] = fit$aic
}
which.min(aic_ma)
which.min(aic_ar)
matrix(data = round(c(fit_monthly_ma$aic,fit_monthly_ar$aic),3),
nrow = 1, ncol = 2,
dimnames = list("AIC",c("MA(6)","AR(6)")))
fit_monthly_ar$coef
plot(forecast(fit_monthly_ma,h=length(test)), lwd = 2)
forecasting = forecast(fit_monthly,h=length(test))
forecasting = forecast(fit_monthly_ma,h=length(test))
pred_upper = forecasting$upper[,2]
pred_lower = forecasting$lower[,2]
PI = cbind(pred_lower, pred_upper)
test - forecasting$mean
plot(forecast(fit_monthly_ma,h=length(test)), lwd = 2)
test = pm_monthly[round(length(pm_monthly)*0.9)+1 : length(pm_monthly)]
pm_monthly = ddply(pm25_time, .(year,month), aggregate_pm)
colnames(pm_monthly) = c("year","month","pm2.5")
pm_monthly = pm_monthly$pm2.5
test = pm_monthly[round(length(pm_monthly)*0.9)+1 : length(pm_monthly)]
pm_monthly = pm_daily[1:round(length(pm_monthly)*0.9)]
plot(forecast(fit_monthly_ma,h=length(test)), lwd = 2)
forecasting = forecast(fit_monthly_ma,h=length(test))
pred_upper = forecasting$upper[,2]
pred_lower = forecasting$lower[,2]
PI = cbind(pred_lower, pred_upper)
test - forecasting$mean
length(test)
length(test)
length(pm_monthly)*0.9
round(length(pm_monthly)*0.9)
round(length(pm_monthly)*0.9)
pm_monthly = ddply(pm25_time, .(year,month), aggregate_pm)
colnames(pm_monthly) = c("year","month","pm2.5")
pm_monthly = pm_monthly$pm2.5
test = pm_monthly[(round(length(pm_monthly)*0.9)+1) : length(pm_monthly)]
pm_monthly = pm_daily[1:round(length(pm_monthly)*0.9)]
plot(forecast(fit_monthly_ma,h=length(test)), lwd = 2)
forecasting = forecast(fit_monthly_ma,h=length(test))
pred_upper = forecasting$upper[,2]
pred_lower = forecasting$lower[,2]
PI = cbind(pred_lower, pred_upper)
test - forecasting$mean
